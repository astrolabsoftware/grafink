reader {
  basePath = "/test/base/path"
  format = "parquet"
  keepCols = ["objectId", "schemavsn", "publisher", "fink_broker_version", "fink_science_version", "candidate", "cdsxmatch", "rfscore", "snnscore", "roid"]
  keepColsRenamed =
    [ { "f": "mulens.class_1", "t": "mulens_class_1" },
      { "f": "mulens.class_2", "t": "mulens_class_2" },
      { "f": "cutoutScience.stampData", "t": "cutoutScience" },
      { "f": "cutoutTemplate.stampData", "t": "cutoutTemplate" },
      { "f": "cutoutDifference.stampData", "t": "cutoutDifference" },
      { "f": "candidate.classtar", "t": "classtar" }
    ]
}

idManager {
  spark {
    dataPath = "/test/intermediate/base/path"
    clearOnDelete = false
  }
  hbase {
    tableName = "IDManagement"
    cf = "cf1"
    qualifier = "id"
  }
}

janusgraph {
  schema {
    vertexPropertyCols = ["rfscore", "snnscore", "mulens_class_1", "mulens_class_2", "cdsxmatch", "roid", "classtar", "objectId"]
    vertexLabel = "alert"
    edgeLabels = [
      {
        name = "similarity"
        properties = {
          key = "value"
          typ = "int"
        }
      }
    ]
    index {
      composite = [
        {
          name = "objectIdIndex"
          properties = ["objectId"]
        }
      ]
      mixed = [
      ]
      edge = [
        {
          name = "similarityIndex"
          properties = ["value"]
          label = "similarity"
        }
      ]
    }
  }
  vertexLoader {
    batchSize = 100
  }
  edgeLoader = {
    batchSize = 100
    parallelism = 10
    taskSize = 25000
    rules {
      similarityClassifer {
        similarityExp = "(rfscore AND snnscore) OR mulens OR cdsxmatch OR objectId OR roid"
      }
    }
  }
  storage {
    host: "127.0.0.1"
    port: 8182
    tableName = "TestJanusGraph"
    extraConf = ["zookeeper.recovery.retry=3", "hbase.client.retries.number=0"]
  }
  indexBackend {
    name = "elastic"
    indexName = "elastictest"
    host: "127.0.0.1:9200"
  }
}

hbase {
  zookeeper {
    quoram = "hbase-1.lal.in2p3.fr"
  }
}