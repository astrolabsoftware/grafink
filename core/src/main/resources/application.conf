reader {
  basePath = "/test/base/path"
  format = "parquet"
  keepCols = ["objectId", "schemavsn", "publisher", "fink_broker_version", "fink_science_version", "candidate", "cdsxmatch", "rfscore", "snnscore", "roid", "candid"]
  keepColsRenamed =
    [ { "f": "mulens.class_1", "t": "mulens_class_1" },
      { "f": "mulens.class_2", "t": "mulens_class_2" },
      { "f": "cutoutScience.stampData", "t": "cutoutScience_stampData" },
      { "f": "cutoutTemplate.stampData", "t": "cutoutTemplate_stampData" },
      { "f": "cutoutDifference.stampData", "t": "cutoutDifference_stampData" },
      { "f": "candidate.classtar", "t": "classtar" },
      { "f": "candidate.jd", "t": "jd" },
      { "f": "candidate.magpsf", "t": "magpsf" },
      { "f": "candidate.sigmapsf", "t": "sigmapsf" }
    ]
  newCols = [
    { "name": "rowkey", "expr": "objectId || '_' || jd as rowkey" }
  ]
}

idManager {
  spark {
    reservedIdSpace = 200
    dataPath = "/test/intermediate/base/path"
    clearOnDelete = false
  }
  hbase {
    tableName = "IDManagement"
    cf = "cf1"
    qualifier = "id"
  }
}

job {
  schema {
    vertexLabels = [
      {
        name = "alert"
        properties = []
        propertiesFromData = [
          "rfscore",
          "snnscore",
          "mulens_class_1",
          "mulens_class_2",
          "cdsxmatch",
          "roid",
          "classtar",
          "objectId",
          "rowkey",
          "candid",
          "jd",
          "magpsf",
          "sigmapsf"
        ]
      },
      {
        name = "similarity"
        properties = [
          {
            name = "recipe"
            typ = "string"
          },
          {
            name = "value"
            typ = "string"
          }
        ]
      }
    ]
    edgeLabels = [
      {
        name = "similarity"
        properties = [
          {
            name = "value"
            typ = "int"
          }
        ]
      },
      {
        name = "satr"
        properties = [
          {
            name = "weight"
            typ = "double"
          }
        ]
      }
    ]
    index {
      composite = [
        {
          name = "objectIdIndex"
          properties = ["objectId"]
        },
        {
          name = "rowkeyIndex"
          properties = ["rowkey"]
        }
      ]
      mixed = [
      ]
      edge = [
        {
          name = "similarityIndex"
          properties = ["value"]
          label = "similarity"
        }
      ]
    }
  }
  vertexLoader {
    batchSize = 100
    label = "alert"
    fixedVertices = "fixedvertices.csv"
  }
  edgeLoader = {
    batchSize = 100
    parallelism = 10
    taskSize = 25000
    rulesToApply = ["twoModeClassifier"]
    rules {
      similarityClassifer {
        similarityExp = "(rfscore AND snnscore) OR mulens OR cdsxmatch OR objectId OR roid"
      }
      twoModeClassifier {
        recipes = ["supernova", "microlensing", "catalog", "asteroids"]
      }
    }
  }
}

janusgraph {
  storage {
    host: "127.0.0.1"
    port: 8182
    tableName = "TestJanusGraph"
    extraConf = ["zookeeper.recovery.retry=3", "hbase.client.retries.number=0"]
  }
  indexBackend {
    name = "elastic"
    indexName = "elastictest"
    host: "127.0.0.1:9200"
  }
}

hbase {
  zookeeper {
    quoram = "hbase-1.lal.in2p3.fr"
  }
}